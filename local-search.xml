<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>fastapi快速入门</title>
    <link href="/2025/04/26/fastapi%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2025/04/26/fastapi%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么选FastAPI？"><a href="#为什么选FastAPI？" class="headerlink" title="为什么选FastAPI？"></a>为什么选FastAPI？</h2><p>先贴一个官方文档</p><p>主要原因有这么几点：</p><ul><li><strong>速度快</strong>：基于ASGI异步框架，性能直逼Go语言</li><li><strong>开发快</strong>：自动生成API文档</li><li><strong>类型提示</strong>：用Python的类型注解自动验证参数</li><li><strong>现代化</strong>：支持异步编程，默认就是async&#x2F;await</li></ul><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>先装FastAPI和uvicorn（一个高性能的ASGI服务器）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install fastapi uvicorn<br></code></pre></td></tr></table></figure><h2 id="第一个FastAPI应用"><a href="#第一个FastAPI应用" class="headerlink" title="第一个FastAPI应用"></a>第一个FastAPI应用</h2><p>直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> FastAPI<br><br>app = FastAPI()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">root</span>():<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>保存为<code>main.py</code>，然后运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">uvicorn main:app --reload<br></code></pre></td></tr></table></figure><p>打开浏览器访问 <code>http://localhost:8000</code>，你就能看到返回的JSON了。</p><p>同时，访问 <code>http://localhost:8000/docs</code>，你会看到自动生成的API文档！这是FastAPI自带的功能。</p><h2 id="路由和请求处理"><a href="#路由和请求处理" class="headerlink" title="路由和请求处理"></a>路由和请求处理</h2><p>FastAPI的路由设计很直观，支持所有标准的HTTP方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span></span>):<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id&#125;<br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span>, price: <span class="hljs-built_in">float</span>, is_offer: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">None</span></span>):<br>    item = &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: name,<br>        <span class="hljs-string">&quot;price&quot;</span>: price,<br>        <span class="hljs-string">&quot;is_offer&quot;</span>: is_offer<br>    &#125;<br>    <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></table></figure><p>注意：这里用了类型提示（item_id: int），FastAPI会自动做参数验证。如果有人传了个字符串给item_id，FastAPI会直接返回422错误，连写验证代码都省了。</p><h2 id="请求体和数据模型"><a href="#请求体和数据模型" class="headerlink" title="请求体和数据模型"></a>请求体和数据模型</h2><p>实际开发中，我们经常要处理复杂的数据结构。FastAPI配合Pydantic使用，能让数据处理变得异常简单：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pydantic <span class="hljs-keyword">import</span> BaseModel<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Item</span>(<span class="hljs-title class_ inherited__">BaseModel</span>):<br>    name: <span class="hljs-built_in">str</span><br>    description: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span><br>    price: <span class="hljs-built_in">float</span><br>    tax: <span class="hljs-built_in">float</span> = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">@app.post(<span class="hljs-params"><span class="hljs-string">&quot;/items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">create_item</span>(<span class="hljs-params">item: Item</span>):<br>    item_dict = item.<span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">if</span> item.tax:<br>        price_with_tax = item.price + item.tax<br>        item_dict.update(&#123;<span class="hljs-string">&quot;price_with_tax&quot;</span>: price_with_tax&#125;)<br>    <span class="hljs-keyword">return</span> item_dict<br></code></pre></td></tr></table></figure><p>这里的Item是一个Pydantic模型，它不仅定义了数据结构，还自带数据验证功能。客户端发来的JSON会自动解析成Item对象。</p><h2 id="查询参数和路径参数"><a href="#查询参数和路径参数" class="headerlink" title="查询参数和路径参数"></a>查询参数和路径参数</h2><p>在FastAPI中，处理URL参数和查询参数都很直观：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/&#123;user_id&#125;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_user_item</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">int</span>, item_id: <span class="hljs-built_in">str</span>, q: <span class="hljs-built_in">str</span> = <span class="hljs-literal">None</span>, short: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>):<br>    item = &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id, <span class="hljs-string">&quot;owner_id&quot;</span>: user_id&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        item.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> short:<br>        item.update(<br>            &#123;<span class="hljs-string">&quot;description&quot;</span>: <span class="hljs-string">&quot;这是一个很长的描述，在short为True时会被省略&quot;</span>&#125;<br>        )<br>    <span class="hljs-keyword">return</span> item<br></code></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>user_id</code>和<code>item_id</code>是路径参数</li><li><code>q</code>和<code>short</code>是查询参数，而且都有默认值</li></ul><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>FastAPI提供了优雅的错误处理机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> HTTPException<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">if</span> item_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> items:<br>        <span class="hljs-keyword">raise</span> HTTPException(status_code=<span class="hljs-number">404</span>, detail=<span class="hljs-string">&quot;Item not found&quot;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item&quot;</span>: items[item_id]&#125;<br></code></pre></td></tr></table></figure><p>用<code>HTTPException</code>抛出HTTP错误，FastAPI会自动返回相应的错误响应。</p><h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>FastAPI的依赖注入系统很强大，可以帮你管理共享的资源和认证：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Depends<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_db</span>():<br>    db = DBSession()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> db<br>    <span class="hljs-keyword">finally</span>:<br>        db.close()<br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_users</span>(<span class="hljs-params">db: DBSession = Depends(<span class="hljs-params">get_db</span>)</span>):<br>    users = db.query(User).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> users<br></code></pre></td></tr></table></figure><p>这里的<code>get_db</code>函数会在每次请求时自动调用，并在请求结束后清理资源。</p><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>想在请求处理前后做点什么？用中间件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.middleware(<span class="hljs-params"><span class="hljs-string">&quot;http&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_process_time_header</span>(<span class="hljs-params">request, call_next</span>):<br>    start_time = time.time()<br>    response = <span class="hljs-keyword">await</span> call_next(request)<br>    process_time = time.time() - start_time<br>    response.headers[<span class="hljs-string">&quot;X-Process-Time&quot;</span>] = <span class="hljs-built_in">str</span>(process_time)<br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>这个中间件会给每个响应添加一个处理时间的响应头。</p><h2 id="异步支持"><a href="#异步支持" class="headerlink" title="异步支持"></a>异步支持</h2><p>FastAPI原生支持异步操作，特别适合I&#x2F;O密集型应用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/async-items/&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">read_items</span>():<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> httpx.AsyncClient() <span class="hljs-keyword">as</span> client:<br>        response = <span class="hljs-keyword">await</span> client.get(<span class="hljs-string">&quot;https://api.example.com/data&quot;</span>)<br>    <span class="hljs-keyword">return</span> response.json()<br></code></pre></td></tr></table></figure><p>记住：如果你的函数里有IO操作（比如数据库查询、HTTP请求），最好用异步的方式。</p><h2 id="部署建议"><a href="#部署建议" class="headerlink" title="部署建议"></a>部署建议</h2><p>开发阶段用<code>uvicorn</code>就够了，但生产环境建议这样部署：</p><ol><li><p>使用gunicorn作为进程管理器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker<br></code></pre></td></tr></table></figure></li><li><p>配合Nginx做反向代理：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> example.com;<br>    <br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8000;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FastAPI</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/26/hello-world/"/>
    <url>/2025/04/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>技术文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于ERA5再分析数据的亚太地区气温短期预测研究报告</title>
    <link href="/2025/04/26/%E5%9F%BA%E4%BA%8EERA5%E5%86%8D%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%9A%E5%A4%AA%E5%9C%B0%E5%8C%BA%E6%B0%94%E6%B8%A9%E7%9F%AD%E6%9C%9F%E9%A2%84%E6%B5%8B/"/>
    <url>/2025/04/26/%E5%9F%BA%E4%BA%8EERA5%E5%86%8D%E5%88%86%E6%9E%90%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%9A%E5%A4%AA%E5%9C%B0%E5%8C%BA%E6%B0%94%E6%B8%A9%E7%9F%AD%E6%9C%9F%E9%A2%84%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、研究背景与动机"><a href="#一、研究背景与动机" class="headerlink" title="一、研究背景与动机"></a>一、研究背景与动机</h2><p>近年来，全球气候变暖趋势日益显著，极端气候事件频发，对生态环境和社会经济造成了巨大影响。亚太地区作为全球人口最密集、经济最活跃的区域之一，其气候变化状况不仅影响本区域，也具有全球性意义。因此，提升该地区气温变化趋势的预测精度，对制定科学合理的气候政策具有重要意义。</p><p>本研究聚焦于2015年至2024年间亚太地区的气温变化趋势，基于ERA5再分析数据，并结合大气CO₂浓度与ENSO（厄尔尼诺-南方涛动）指数，构建气温短期预测模型。</p><h2 id="二、数据来源与处理"><a href="#二、数据来源与处理" class="headerlink" title="二、数据来源与处理"></a>二、数据来源与处理</h2><p>本研究使用的主要数据包括：</p><ul><li><strong>ERA5气温数据</strong>：来自欧洲中期天气预报中心（ECMWF），时空分辨率高，涵盖2015-2024年亚太区域。</li><li><strong>CO₂浓度数据</strong>：来自NOAA，选取Mauna Loa站的全球代表性月度均值。</li><li><strong>ONI（ENSO）指数</strong>：用于表征厄尔尼诺&#x2F;拉尼娜事件的强度与状态。</li></ul><p>数据预处理步骤包括：</p><ul><li>清洗与异常值检测</li><li>标准化处理（Z-score）</li><li>时间对齐（特别是ONI跨年的季节码）</li></ul><h2 id="三、探索性分析与变量关联"><a href="#三、探索性分析与变量关联" class="headerlink" title="三、探索性分析与变量关联"></a>三、探索性分析与变量关联</h2><ul><li>使用可视化（箱线图、热力图、散点图）揭示温度、CO₂浓度、ENSO指数之间的关系；</li><li>相关性分析表明，在去除季节性因素后，CO₂浓度与温度异常呈中等正相关（r≈0.4），ENSO与温度异常相关性略低但仍显著；</li><li>时间序列分解表明，气温变化中**趋势成分占比约60%**，季节性成分约35%，残差成分约5%。</li></ul><h2 id="四、特征工程与建模输入"><a href="#四、特征工程与建模输入" class="headerlink" title="四、特征工程与建模输入"></a>四、特征工程与建模输入</h2><p>我们设计并筛选了14个输入特征，包括：</p><ul><li><strong>时间与周期特征</strong>：如 <code>month_cos</code>、<code>season_sin</code></li><li><strong>滞后特征</strong>：如 <code>temperature_lag_1</code>、<code>temperature_lag_12</code></li><li><strong>滚动统计特征</strong>：如 <code>temperature_rolling_mean_3</code></li><li><strong>交互特征</strong>：如 <code>temperature_div_co2</code>（单位CO₂浓度下温度），<code>temperature_mul_co2</code> 等</li></ul><p>最终特征在控制冗余与共线性后，保留了对预测贡献最大的特征集。</p><h2 id="五、模型选择与训练方法"><a href="#五、模型选择与训练方法" class="headerlink" title="五、模型选择与训练方法"></a>五、模型选择与训练方法</h2><p>我们选用 <strong>LightGBM</strong> 作为主模型，理由包括：</p><ul><li>强大的非线性建模能力；</li><li>高效处理高维特征；</li><li>良好的特征解释能力（支持SHAP分析）；</li><li>较强的泛化能力，适合时间序列预测任务。</li></ul><p><strong>训练集与测试集</strong>采用时间前向划分（2015-2022为训练，2023-2024为测试），并使用 <strong>Optuna + GridSearchCV</strong> 联合调参，评估指标为 RMSE。</p><h2 id="六、模型表现与评估"><a href="#六、模型表现与评估" class="headerlink" title="六、模型表现与评估"></a>六、模型表现与评估</h2><p>在测试集上的表现如下：</p><table><thead><tr><th>指标</th><th>值</th><th>评价</th></tr></thead><tbody><tr><td>RMSE</td><td>0.3154°C</td><td>极佳</td></tr><tr><td>MAE</td><td>0.2770°C</td><td>极佳</td></tr><tr><td>R²</td><td>0.9956</td><td>极高解释力</td></tr></tbody></table><p><strong>SHAP分析结果</strong>揭示出 <code>temperature_div_co2</code>、<code>temperature_mul_co2</code> 和 <code>month_cos</code> 是影响预测结果的核心变量。</p><p>残差分析、正态性检验、异方差检验均通过，表明模型稳定可靠。</p><h2 id="七、研究意义与应用价值"><a href="#七、研究意义与应用价值" class="headerlink" title="七、研究意义与应用价值"></a>七、研究意义与应用价值</h2><p>本研究成果可为以下领域提供支持：</p><ul><li><strong>区域气候政策制定</strong>：基于预测结果科学设定减排目标；</li><li><strong>极端天气预警系统</strong>：提升应对极端气候事件的准备能力；</li><li><strong>碳排放评估与模拟</strong>：结合CO₂浓度变化对气温响应进行模拟与推演。</li></ul><h2 id="八、后续工作展望"><a href="#八、后续工作展望" class="headerlink" title="八、后续工作展望"></a>八、后续工作展望</h2><ul><li>增加更多气候因子（如湿度、风速、降水）以提升模型多维解释性；</li><li>引入深度学习模型（如Temporal Fusion Transformer, Graph Neural Networks）进行对比研究；</li><li>在更小空间尺度（如中国、四川、成渝）进行区域性建模，提高政策精度。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Mechine Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Climate</tag>
      
      <tag>Temperature</tag>
      
      <tag>Prediction</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
